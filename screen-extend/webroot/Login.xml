<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen-extend xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://moqui.org/xsd/xml-screen-3.xsd">

    <transition name="logout">
        <actions>
            <set field="moquiAuthFlowExternalLogout" from="ec.web.sessionAttributes.containsKey('moquiAuthFlowExternalLogout')"/>
            <if condition="moquiAuthFlowExternalLogout">
                <then>
                    <service-call name="org.moqui.sso.AuthServices.logout#User"/>
                </then>
                <else>
                    <script>ec.user.logoutUser()</script>
                </else>
            </if>
        </actions>
        <conditional-response type="none">
            <condition>
                <expression>moquiAuthFlowExternalLogout</expression>
            </condition>
        </conditional-response>
        <default-response url="/"/>
        <error-response url="."/>
    </transition>
    <transition name="authFlows" require-session-token="false">
        <actions>
            <script>
                ec.artifactExecution.disableAuthz()
            </script>
            <entity-find entity-name="moqui.security.sso.AuthFlow" list="activeAuthFlowList">
                <econdition field-name="disabled" operator="not-equals" value="Y" or-null="true"/>
                <order-by field-name="sequenceNum,description"/>
            </entity-find>
            <set field="authFlowList" from="[]"/>
            <set field="clientIp" from="ec.userFacade.getClientIp()"/>
            <iterate list="activeAuthFlowList" entry="authFlow">
                <set field="authFlowMap" from="[:]"/>
                <script><![CDATA[
                    boolean authFlowAuthorized = true
                    if (authFlow.ipAllowed && !clientIp.contains(":")) {
                        authFlowAuthorized = false
                        String[] ipAddrs = (authFlow.ipAllowed as String).split(",")
                        for (String ipAddr : ipAddrs) {
                            if (org.moqui.util.WebUtilities.ip4Matches(ipAddr, clientIp)) {
                                authFlowAuthorized = true
                                break
                            }
                        }
                    }

                    if (authFlowAuthorized) {
                        authFlowMap.put("authFlowId", authFlow.authFlowId)
                        authFlowMap.put("authFlowTypeEnumId", authFlow.authFlowTypeEnumId)
                        authFlowMap.put("description", authFlow.description)
                        authFlowMap.put("iconName", authFlow.iconName)
                        authFlowMap.put("sequenceNum", authFlow.sequenceNum)
                        authFlowList.add(authFlowMap)
                    }
                ]]></script>
            </iterate>
            <script>
                ec.web.sendJsonResponse([authFlowList: authFlowList])
                ec.artifactExecution.enableAuthz()
            </script>
        </actions>
        <default-response type="none"/>
    </transition>
    <transition name="sessionInfo" require-session-token="false">
        <actions>
            <script>
                ec.web.sendJsonResponse([userId: ec.user.userId,
                                         creationTime: ec.web.session.getCreationTime(),
                                         lastAccessedTime: ec.web.session.getLastAccessedTime(),
                                         maxInactiveInterval: ec.web.session.getMaxInactiveInterval(),
                                         moquiSessionToken: ec.web.sessionToken,
                ])
            </script>
        </actions>
        <default-response type="none"/>
    </transition>

    <actions-extend>
        <script>ec.artifactExecution.disableAuthz()</script>
        <entity-find entity-name="moqui.security.sso.AuthFlow" list="authFlowList">
            <econdition field-name="inbound" operator="not-equals" value="Y" or-null="true"/>
            <econdition field-name="disabled" operator="not-equals" value="Y" or-null="true"/>
            <order-by field-name="sequenceNum"/>
        </entity-find>
        <script>ec.artifactExecution.enableAuthz()</script>
    </actions-extend>
    
</screen-extend>